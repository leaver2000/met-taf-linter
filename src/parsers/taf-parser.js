// Generated by Peggy 1.2.0.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var loc = this.location.source + ":" + s.line + ":" + s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", s.line.toString().length);
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1)
          + peg$padEnd("", last - s.column, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { RUN: peg$parseRUN };
  var peg$startRuleFunction = peg$parseRUN;

  var peg$c0 = "TAF";
  var peg$c1 = "BECMG";
  var peg$c2 = "/";
  var peg$c3 = "TEMPO";
  var peg$c4 = "Z";
  var peg$c5 = "-";
  var peg$c6 = "+";
  var peg$c7 = "VC";
  var peg$c8 = "TS";
  var peg$c9 = "SH";
  var peg$c10 = "FG";
  var peg$c11 = "BL";
  var peg$c12 = "SN";
  var peg$c13 = "DU";
  var peg$c14 = "SA";
  var peg$c15 = "PO";
  var peg$c16 = "SS";
  var peg$c17 = "DS";
  var peg$c18 = "RA";
  var peg$c19 = "GR";
  var peg$c20 = "DZ";
  var peg$c21 = "FZ";
  var peg$c22 = "BR";
  var peg$c23 = "FU";
  var peg$c24 = "VA";
  var peg$c25 = "HZ";
  var peg$c26 = "PY";
  var peg$c27 = "VRB";
  var peg$c28 = "KT";
  var peg$c29 = "G";
  var peg$c30 = "0000";
  var peg$c31 = "0100";
  var peg$c32 = "0200";
  var peg$c33 = "0300";
  var peg$c34 = "0400";
  var peg$c35 = "0600";
  var peg$c36 = "0700";
  var peg$c37 = "0800";
  var peg$c38 = "0900";
  var peg$c39 = "1000";
  var peg$c40 = "1100";
  var peg$c41 = "1200";
  var peg$c42 = "1400";
  var peg$c43 = "1500";
  var peg$c44 = "1600";
  var peg$c45 = "1700";
  var peg$c46 = "1800";
  var peg$c47 = "2000";
  var peg$c48 = "2200";
  var peg$c49 = "2400";
  var peg$c50 = "2600";
  var peg$c51 = "2800";
  var peg$c52 = "3000";
  var peg$c53 = "3200";
  var peg$c54 = "3400";
  var peg$c55 = "3600";
  var peg$c56 = "3700";
  var peg$c57 = "4000";
  var peg$c58 = "4400";
  var peg$c59 = "4500";
  var peg$c60 = "4700";
  var peg$c61 = "4800";
  var peg$c62 = "5000";
  var peg$c63 = "6000";
  var peg$c64 = "7000";
  var peg$c65 = "8000";
  var peg$c66 = "9000";
  var peg$c67 = "9999";
  var peg$c68 = "VV";
  var peg$c69 = "SKC";
  var peg$c70 = "FEW";
  var peg$c71 = "SCT";
  var peg$c72 = "BKN";
  var peg$c73 = "OVC";
  var peg$c74 = "CB";
  var peg$c75 = "QNH";
  var peg$c76 = "29";
  var peg$c77 = "30";
  var peg$c78 = "INS";
  var peg$c79 = "TX";
  var peg$c80 = "TN";
  var peg$c81 = "M";

  var peg$r0 = /^[ \t\n\r ]/;
  var peg$r1 = /^[\n]/;
  var peg$r2 = /^[A-Z]/;
  var peg$r3 = /^[0,1,2]/;
  var peg$r4 = /^[0-9]/;
  var peg$r5 = /^[3]/;
  var peg$r6 = /^[0,1]/;
  var peg$r7 = /^[2]/;
  var peg$r8 = /^[1,2,3,4]/;
  var peg$r9 = /^[0,1,2,3,4,5,6]/;
  var peg$r10 = /^[0]/;
  var peg$r11 = /^[0,1,2,3]/;

  var peg$e0 = peg$otherExpectation("Single White Space Indicator");
  var peg$e1 = peg$classExpectation([" ", "\t", "\n", "\r", " "], false, false);
  var peg$e2 = peg$otherExpectation("New Line Indicator");
  var peg$e3 = peg$classExpectation(["\n"], false, false);
  var peg$e4 = peg$otherExpectation("TAF Header");
  var peg$e5 = peg$literalExpectation("TAF", false);
  var peg$e6 = peg$classExpectation([["A", "Z"]], false, false);
  var peg$e7 = peg$otherExpectation("Becoming (BECMG)\u2014The change-indicator group TTTTT YYGG/YYGeGe inthe form of BECMG YYGG/YYGeGe is used to indicate a change to forecast prevailingconditions expected to occur at either a regular or irregular rate at an unspecified timewithin the period defined by a two-digit date (YY), two-digit change beginning time (GG)with a slash separating a two-digit date (YY) and a two-digit ending time (GeGe) in wholehours. The time-period described by a BECMG group is usually for one hour but neverexceeds two hours. This change to the predominant conditions are followed by adescription of all elements for which the change is forecast. The forecast conditionsencoded after the BECMG YYGG/YYGeGe group are those elements expected to prevailfrom the ending time of this change group (GeGe) to the ending time of the forecast period");
  var peg$e8 = peg$literalExpectation("BECMG", false);
  var peg$e9 = peg$otherExpectation("BECMG Group Valid Time");
  var peg$e10 = peg$literalExpectation("/", false);
  var peg$e11 = peg$otherExpectation("Temporary (TEMPO)\u2014The change-indicator group TTTTT YYGG/YYGeGe inthe form of TEMPO YYGG/YYGeGe group is used to indicate temporary fluctuations tothe forecast meteorological conditions.");
  var peg$e12 = peg$literalExpectation("TEMPO", false);
  var peg$e13 = peg$otherExpectation("Tempo Line");
  var peg$e14 = peg$otherExpectation("TEMPO Group Valid Time");
  var peg$e15 = peg$otherExpectation("Issue & Valid Time Period DDHHMMZ DDHH/DDHH");
  var peg$e16 = peg$otherExpectation("TAF Issue Time");
  var peg$e17 = peg$literalExpectation("Z", false);
  var peg$e18 = peg$otherExpectation("TAF Valid Range");
  var peg$e19 = peg$otherExpectation("Day");
  var peg$e20 = peg$classExpectation(["0", ",", "1", ",", "2"], false, false);
  var peg$e21 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e22 = peg$classExpectation(["3"], false, false);
  var peg$e23 = peg$classExpectation(["0", ",", "1"], false, false);
  var peg$e24 = peg$otherExpectation("Hour");
  var peg$e25 = peg$classExpectation(["2"], false, false);
  var peg$e26 = peg$classExpectation(["1", ",", "2", ",", "3", ",", "4"], false, false);
  var peg$e27 = peg$otherExpectation("Minute");
  var peg$e28 = peg$classExpectation(["0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"], false, false);
  var peg$e29 = peg$otherExpectation("[Weather (w'w') Group]: intensity/proximity, followed by description,followed by precipitation type (two precipitation types can be used in the same w'w' group), obscuration, or other weather phenomena (e.g., +SHRA is heavy showers of rain, +TSRAGR is thunderstorms, heavy rain, and hail; -RASN is light rain and snow; TS isthunderstorm without precipitation).");
  var peg$e30 = peg$literalExpectation("-", false);
  var peg$e31 = peg$literalExpectation("+", false);
  var peg$e32 = peg$literalExpectation("VC", false);
  var peg$e33 = peg$literalExpectation("TS", false);
  var peg$e34 = peg$literalExpectation("SH", false);
  var peg$e35 = peg$literalExpectation("FG", false);
  var peg$e36 = peg$literalExpectation("BL", false);
  var peg$e37 = peg$literalExpectation("SN", false);
  var peg$e38 = peg$literalExpectation("DU", false);
  var peg$e39 = peg$literalExpectation("SA", false);
  var peg$e40 = peg$literalExpectation("PO", false);
  var peg$e41 = peg$literalExpectation("SS", false);
  var peg$e42 = peg$literalExpectation("DS", false);
  var peg$e43 = peg$literalExpectation("RA", false);
  var peg$e44 = peg$literalExpectation("GR", false);
  var peg$e45 = peg$literalExpectation("DZ", false);
  var peg$e46 = peg$literalExpectation("FZ", false);
  var peg$e47 = peg$literalExpectation("BR", false);
  var peg$e48 = peg$literalExpectation("FU", false);
  var peg$e49 = peg$literalExpectation("VA", false);
  var peg$e50 = peg$literalExpectation("HZ", false);
  var peg$e51 = peg$literalExpectation("PY", false);
  var peg$e52 = peg$otherExpectation("1.3.4. Wind Group (dddffGfmfmKT). Surface wind direction, speed and gusts, if any.");
  var peg$e53 = peg$classExpectation(["0"], false, false);
  var peg$e54 = peg$literalExpectation("VRB", false);
  var peg$e55 = peg$literalExpectation("KT", false);
  var peg$e56 = peg$otherExpectation("Wind Gusts");
  var peg$e57 = peg$literalExpectation("G", false);
  var peg$e58 = peg$otherExpectation("Visibility Group (VVVV)");
  var peg$e59 = peg$literalExpectation("0000", false);
  var peg$e60 = peg$literalExpectation("0100", false);
  var peg$e61 = peg$literalExpectation("0200", false);
  var peg$e62 = peg$literalExpectation("0300", false);
  var peg$e63 = peg$literalExpectation("0400", false);
  var peg$e64 = peg$literalExpectation("0600", false);
  var peg$e65 = peg$literalExpectation("0700", false);
  var peg$e66 = peg$literalExpectation("0800", false);
  var peg$e67 = peg$literalExpectation("0900", false);
  var peg$e68 = peg$literalExpectation("1000", false);
  var peg$e69 = peg$literalExpectation("1100", false);
  var peg$e70 = peg$literalExpectation("1200", false);
  var peg$e71 = peg$literalExpectation("1400", false);
  var peg$e72 = peg$literalExpectation("1500", false);
  var peg$e73 = peg$literalExpectation("1600", false);
  var peg$e74 = peg$literalExpectation("1700", false);
  var peg$e75 = peg$literalExpectation("1800", false);
  var peg$e76 = peg$literalExpectation("2000", false);
  var peg$e77 = peg$literalExpectation("2200", false);
  var peg$e78 = peg$literalExpectation("2400", false);
  var peg$e79 = peg$literalExpectation("2600", false);
  var peg$e80 = peg$literalExpectation("2800", false);
  var peg$e81 = peg$literalExpectation("3000", false);
  var peg$e82 = peg$literalExpectation("3200", false);
  var peg$e83 = peg$literalExpectation("3400", false);
  var peg$e84 = peg$literalExpectation("3600", false);
  var peg$e85 = peg$literalExpectation("3700", false);
  var peg$e86 = peg$literalExpectation("4000", false);
  var peg$e87 = peg$literalExpectation("4400", false);
  var peg$e88 = peg$literalExpectation("4500", false);
  var peg$e89 = peg$literalExpectation("4700", false);
  var peg$e90 = peg$literalExpectation("4800", false);
  var peg$e91 = peg$literalExpectation("5000", false);
  var peg$e92 = peg$literalExpectation("6000", false);
  var peg$e93 = peg$literalExpectation("7000", false);
  var peg$e94 = peg$literalExpectation("8000", false);
  var peg$e95 = peg$literalExpectation("9000", false);
  var peg$e96 = peg$literalExpectation("9999", false);
  var peg$e97 = peg$otherExpectation("CloudObscurationGroup (NsNsNshshshsCC)");
  var peg$e98 = peg$literalExpectation("VV", false);
  var peg$e99 = peg$literalExpectation("SKC", false);
  var peg$e100 = peg$otherExpectation("(FEW = trace to 2/8ths);");
  var peg$e101 = peg$otherExpectation("(SCT = 3/8ths to 4/8ths);");
  var peg$e102 = peg$otherExpectation("(BKN = 5/8ths to 7/8ths);");
  var peg$e103 = peg$literalExpectation("FEW", false);
  var peg$e104 = peg$literalExpectation("SCT", false);
  var peg$e105 = peg$literalExpectation("BKN", false);
  var peg$e106 = peg$otherExpectation("(OVC = 8/8ths);");
  var peg$e107 = peg$literalExpectation("OVC", false);
  var peg$e108 = peg$classExpectation(["0", ",", "1", ",", "2", ",", "3"], false, false);
  var peg$e109 = peg$literalExpectation("CB", false);
  var peg$e110 = peg$literalExpectation("QNH", false);
  var peg$e111 = peg$literalExpectation("29", false);
  var peg$e112 = peg$literalExpectation("30", false);
  var peg$e113 = peg$literalExpectation("INS", false);
  var peg$e114 = peg$otherExpectation("1.3.5.1. Forecast Maximum and Minimum Temperature groups (T(X)(N)[M]TFTF/YYGFGFZ)");
  var peg$e115 = peg$literalExpectation("TX", false);
  var peg$e116 = peg$literalExpectation("TN", false);
  var peg$e117 = peg$literalExpectation("M", false);

  var peg$f0 = function(header) {return header};
  var peg$f1 = function(word) { return options.icao.includes(word) };
  var peg$f2 = function(wind, visibility, weather, skyCondition, altsg) {
          const forecastedWX = validateCondtions(weather,{wind,visibility,weather,skyCondition}) 

          if(visibility<=9000 && forecastedWX.length === 0){
              throw {
                  message:"\
                  1.3.5. Visibility Group (VVVV). Forecast prevailing visibility in meters, rounded down to\
                  the nearest reportable value from Table 1.1. Include weather and/or an obscuration (w’w’)\
                  whenever visibility is forecast less than 9,999 meters. (T-0) If visibility alternates frequently\
                  from one significant value to another, describe the situation with a TEMPO group; do not use\
                  variable visibility remarks. Note: While a visibility of less than 9,999 meters requires a weather\
                  and/or obscuration, weather such as precipitation does not require a restriction to visibility to\
                  be reported in a forecast (e.g., 9999 –RA). In this case, the weather is significant because it is\
                  occurring, not because it is restricting visibility.",
                  found:location()
                  }
          }



          return [wind, visibility, forecastedWX, skyCondition, altsg ]
      };
  var peg$f3 = function(becmgGroup) {
           return { becmgGroup }
          };
  var peg$f4 = function(startTime, endTime) {
          

          const start = new Date(Date.UTC(2021, 1, ...startTime))
          // console.log(start.getHours())
          const end = new Date(Date.UTC(2021, 1, ...endTime))
          return { start, end }
  };
  var peg$f5 = function(startTime, endTime) {
      return {startTime,endTime}
  };
  var peg$f6 = function(issued, validPeriod) { 
          return {...issued, validPeriod }
      };
  var peg$f7 = function(dateTime) {
          const {year,day} = options
          // console.log(options)
          const issued = new Date(Date.UTC(2021, 1, ...dateTime))
          return { issued }
      };
  var peg$f8 = function(startTime, endTime) {
          const start = new Date(Date.UTC(2021,1, ...startTime))
          const stop = new Date(Date.UTC(2021,1, ...endTime))//.getHours()
          return { start, stop }
       };
  var peg$f9 = function(dd) {return dd.join("")};
  var peg$f10 = function(hh) {return hh.join("") };
  var peg$f11 = function(mm) { return mm.join("") };
  var peg$f12 = function(allPossibleWXConditions) {
          return allPossibleWXConditions
      };
  var peg$f13 = function(wx) {return wx.flat().join("")};
  var peg$f14 = function(wx) {return wx.join("")};
  var peg$f15 = function(wx) {return wx};
  var peg$f16 = function(ddd) { 
          if(ddd==="VRB") return ddd
          return ddd.join("")
      };
  var peg$f17 = function(direction, speed) {

          if(direction ==="VRB" && Number(speed)>6){
              throw {
                  message:'\
                      When wind speed will be more than 6 knots, do not use VRB for ddd \
                      unless the situation involves air-mass thunderstorm activity during which \
                      forecasting a prevailing wind direction with confidence is not possible. When it is \
                      possible to forecast the peak gust direction, but not the prevailing direction, \
                      encode the wind group as VRBffGfmfmKT and append the probable peak gust \
                      direction to remarks (e.g., GST DRCTN 250).',
                  found: location()
                  
              }

          }

           return [direction,...speed]
       };
  var peg$f18 = function(windSpeed) {return [windSpeed]};
  var peg$f19 = function(ff, fm) {
          const ws = Number(ff)
          const wg = Number(fm)
          if(ws>=wg) throw {
              message:"Forecast Gust Should be greater than Forecast Windspeeds",
              found: location()
              }
          return [ff, fm]
          // return (ws>=wg)
      };
  var peg$f20 = function(wind) {return Number(wind.join(""))};
  var peg$f21 = function(vis) { 

              if (options.isConusLocation && vis === "4800") {
                  throw {
                      message:"Note 1: Substitute 5000 meters for 4800 meters Outside the Continental\
                              United States (OCONUS) locations based on the host-nation national\
                              practice.",
                      found: location()
                  }
              } else if (!options.isConusLocation && vis === "5000") throw {
                  message:"Note 1: Substitute 5000 meters for 4800 meters Outside the Continental\
                          United States (OCONUS) locations based on the host-nation national\
                          practice.",
                  found: location()
              }

              return [Number(vis)] 
              };
  var peg$f22 = function(sc) { return [...sc].flat() };
  var peg$f23 = function(nnn) { return [[nnn]] };
  var peg$f24 = function(skc) {return [skc]};
  var peg$f25 = function(L1, L2) {
          return flattenSkyCondition(L1,L2)
      };
  var peg$f26 = function(nnn) { return nnn };
  var peg$f27 = function(L3, L4, L5) {
          return [[L3,L4,L5]]
          // return flattenSkyCondition(L3,L4)
      };
  var peg$f28 = function(L5, L6, L7, L8) {
          // L1 returns an array 
          return [[L5,L6, L6, L7, L8]]//flattenSkyCondition(L1,L2)
      };
  var peg$f29 = function(nnn, base) { return [nnn,...base] };
  var peg$f30 = function(nnn, base) { return [[nnn,...base]] };
  var peg$f31 = function(base, tsFlag) {
          if(!!tsFlag) return [Number(base.join("")*100), true]
          return [Number(base.join("")*100), false]
          };
  var peg$f32 = function(alt, stg) {
       return [Number([alt, stg.join("")].join("."))]
   };
  var peg$f33 = function(DDHH) {
          return new Date(Date.UTC(2021,1, ...DDHH))

      };
  var peg$f34 = function(max, min) {
          const [Tx, Dx, Hx] = max
          const [Tn, Dn, Hn] = min

          return {TX:max,TN:min}
      };
  var peg$f35 = function(tx, utc) {

          const dt = Date(2024,)
          return [tx, utc]
      };
  var peg$f36 = function(tx, utc) {
           return [tx,utc]
       };
  var peg$f37 = function(tt) { 
          const [minus, ...temp] = tt
          if(!!minus) tt = ['-',...temp]
          return Number(tt.join(""))
       };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseRUN() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseMessageHeading();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseLine();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseBECMG_Group();
      if (s3 === peg$FAILED) {
        s3 = peg$parseTEMPO_Group();
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseBECMG_Group();
          if (s3 === peg$FAILED) {
            s3 = peg$parseTEMPO_Group();
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTemperatureGroup();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    peg$silentFails++;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parse_NL() {
    var s0, s1;

    peg$silentFails++;
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseMessageHeading() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseICAO();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTAFTimes();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f0(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseICAO() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f1(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLine() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseWindGroup();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseVisibilityGroup();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWeatherGroup();
        s4 = peg$parseCloudObscurationGroup();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAltsg();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f2(s1, s2, s3, s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBECMG_Group() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_NL();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c1) {
        s2 = peg$c1;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseBECMG_TimeRange();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLine();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parseBECMG_TimeRange() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseDD();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseHH();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseDD();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseHH();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f4(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parseTEMPO_Group() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_NL();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c3) {
        s2 = peg$c3;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseTEMPO_TimeRange();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTEMPO_Line();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parseTEMPO_Line() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWeatherGroup();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parseTEMPO_TimeRange() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseDD();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseHH();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseDD();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseHH();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f5(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parseTAFTimes() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseTAF_IssueTime();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTAF_ValidPeriod();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f6(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseTAF_IssueTime() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseDD();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseHH();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseMM();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 90) {
          s3 = peg$c4;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f7(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parseTAF_ValidPeriod() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseDD();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseHH();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseDD();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseHH();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f8(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseDD() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parseHH() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$r6.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f10(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseMM() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f11(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

    return s0;
  }

  function peg$parseWeatherGroup() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseThunderStorms();
    if (s2 === peg$FAILED) {
      s2 = peg$parsePrecipitation();
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseObscuration();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parseVicinity();
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    s2 = [s2, s3, s4];
    s1 = s2;
    peg$savedPos = s0;
    s1 = peg$f12(s1);
    s0 = s1;
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e29); }

    return s0;
  }

  function peg$parseIntensity() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c5;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c6;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
    }

    return s0;
  }

  function peg$parseVicinity() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c7) {
        s3 = peg$c7;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c8) {
          s4 = peg$c8;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c9) {
            s4 = peg$c9;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e34); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c10) {
              s4 = peg$c10;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e35); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c11) {
                s5 = peg$c11;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e36); }
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c12) {
                  s6 = peg$c12;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e37); }
                }
                if (s6 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c13) {
                    s6 = peg$c13;
                    peg$currPos += 2;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e38); }
                  }
                  if (s6 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c14) {
                      s6 = peg$c14;
                      peg$currPos += 2;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e39); }
                    }
                  }
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c15) {
                  s4 = peg$c15;
                  peg$currPos += 2;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e40); }
                }
                if (s4 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c16) {
                    s4 = peg$c16;
                    peg$currPos += 2;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e41); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c17) {
                      s4 = peg$c17;
                      peg$currPos += 2;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e42); }
                    }
                  }
                }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseThunderStorms() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseIntensity();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (input.substr(peg$currPos, 2) === peg$c8) {
        s4 = peg$c8;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c18) {
          s5 = peg$c18;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c12) {
            s5 = peg$c12;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (input.substr(peg$currPos, 2) === peg$c19) {
          s6 = peg$c19;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s3 = [s3, s4, s5, s6];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePrecipitation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIntensity();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s3 = peg$c20;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$parseRain();
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRain() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c9) {
      s2 = peg$c9;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c21) {
        s2 = peg$c21;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (input.substr(peg$currPos, 2) === peg$c18) {
      s3 = peg$c18;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s3 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s4 = peg$c12;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s2 = [s2, s3, s4];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseObscuration() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseMist();
      if (s2 === peg$FAILED) {
        s2 = peg$parseFog();
        if (s2 === peg$FAILED) {
          s2 = peg$parseSmoke();
          if (s2 === peg$FAILED) {
            s2 = peg$parseVolcanicAsh();
            if (s2 === peg$FAILED) {
              s2 = peg$parseWidespreadDust();
              if (s2 === peg$FAILED) {
                s2 = peg$parseSand();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseHaze();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseSpray();
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f15(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMist() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c22) {
      s0 = peg$c22;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

    return s0;
  }

  function peg$parseFog() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c10) {
      s0 = peg$c10;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

    return s0;
  }

  function peg$parseSmoke() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c23) {
      s0 = peg$c23;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }

    return s0;
  }

  function peg$parseVolcanicAsh() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c24) {
      s0 = peg$c24;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  function peg$parseWidespreadDust() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c11) {
      s2 = peg$c11;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (input.substr(peg$currPos, 2) === peg$c13) {
      s3 = peg$c13;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s3 !== peg$FAILED) {
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSand() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c14) {
      s0 = peg$c14;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }

    return s0;
  }

  function peg$parseHaze() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c25) {
      s0 = peg$c25;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

    return s0;
  }

  function peg$parseSpray() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c26) {
      s0 = peg$c26;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parseBR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c22) {
        s2 = peg$c22;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f15(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWindGroup() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s4 !== peg$FAILED) {
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s5 !== peg$FAILED) {
          if (peg$r10.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s4 !== peg$FAILED) {
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
          if (s5 !== peg$FAILED) {
            if (peg$r10.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e53); }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c27) {
            s3 = peg$c27;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e54); }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$f16(s3);
      }
      s2 = s3;
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSustained();
        if (s3 === peg$FAILED) {
          s3 = peg$parseGusting();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f17(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseSustained() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseValidWinds();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c28) {
        s2 = peg$c28;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f18(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGusting() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseValidWinds();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 71) {
        s2 = peg$c29;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValidWinds();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c28) {
            s4 = peg$c28;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e55); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f19(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }

    return s0;
  }

  function peg$parseValidWinds() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f20(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVisibilityGroup() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c30) {
        s2 = peg$c30;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c31) {
          s2 = peg$c31;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c32) {
            s2 = peg$c32;
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e61); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c33) {
              s2 = peg$c33;
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e62); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c34) {
                s2 = peg$c34;
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e63); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c35) {
                  s2 = peg$c35;
                  peg$currPos += 4;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e64); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c36) {
                    s2 = peg$c36;
                    peg$currPos += 4;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e65); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c37) {
                      s2 = peg$c37;
                      peg$currPos += 4;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e66); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c38) {
                        s2 = peg$c38;
                        peg$currPos += 4;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e67); }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c39) {
                          s2 = peg$c39;
                          peg$currPos += 4;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e68); }
                        }
                        if (s2 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c40) {
                            s2 = peg$c40;
                            peg$currPos += 4;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e69); }
                          }
                          if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c41) {
                              s2 = peg$c41;
                              peg$currPos += 4;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e70); }
                            }
                            if (s2 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c41) {
                                s2 = peg$c41;
                                peg$currPos += 4;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e70); }
                              }
                              if (s2 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c42) {
                                  s2 = peg$c42;
                                  peg$currPos += 4;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e71); }
                                }
                                if (s2 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c43) {
                                    s2 = peg$c43;
                                    peg$currPos += 4;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e72); }
                                  }
                                  if (s2 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c44) {
                                      s2 = peg$c44;
                                      peg$currPos += 4;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e73); }
                                    }
                                    if (s2 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 4) === peg$c45) {
                                        s2 = peg$c45;
                                        peg$currPos += 4;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e74); }
                                      }
                                      if (s2 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 4) === peg$c46) {
                                          s2 = peg$c46;
                                          peg$currPos += 4;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e75); }
                                        }
                                        if (s2 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4) === peg$c47) {
                                            s2 = peg$c47;
                                            peg$currPos += 4;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e76); }
                                          }
                                          if (s2 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 4) === peg$c48) {
                                              s2 = peg$c48;
                                              peg$currPos += 4;
                                            } else {
                                              s2 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e77); }
                                            }
                                            if (s2 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 4) === peg$c49) {
                                                s2 = peg$c49;
                                                peg$currPos += 4;
                                              } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e78); }
                                              }
                                              if (s2 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 4) === peg$c50) {
                                                  s2 = peg$c50;
                                                  peg$currPos += 4;
                                                } else {
                                                  s2 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e79); }
                                                }
                                                if (s2 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 4) === peg$c51) {
                                                    s2 = peg$c51;
                                                    peg$currPos += 4;
                                                  } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e80); }
                                                  }
                                                  if (s2 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c52) {
                                                      s2 = peg$c52;
                                                      peg$currPos += 4;
                                                    } else {
                                                      s2 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e81); }
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 4) === peg$c53) {
                                                        s2 = peg$c53;
                                                        peg$currPos += 4;
                                                      } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e82); }
                                                      }
                                                      if (s2 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 4) === peg$c54) {
                                                          s2 = peg$c54;
                                                          peg$currPos += 4;
                                                        } else {
                                                          s2 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e83); }
                                                        }
                                                        if (s2 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 4) === peg$c55) {
                                                            s2 = peg$c55;
                                                            peg$currPos += 4;
                                                          } else {
                                                            s2 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e84); }
                                                          }
                                                          if (s2 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 4) === peg$c56) {
                                                              s2 = peg$c56;
                                                              peg$currPos += 4;
                                                            } else {
                                                              s2 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e85); }
                                                            }
                                                            if (s2 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 4) === peg$c57) {
                                                                s2 = peg$c57;
                                                                peg$currPos += 4;
                                                              } else {
                                                                s2 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e86); }
                                                              }
                                                              if (s2 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 4) === peg$c58) {
                                                                  s2 = peg$c58;
                                                                  peg$currPos += 4;
                                                                } else {
                                                                  s2 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e87); }
                                                                }
                                                                if (s2 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 4) === peg$c59) {
                                                                    s2 = peg$c59;
                                                                    peg$currPos += 4;
                                                                  } else {
                                                                    s2 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$e88); }
                                                                  }
                                                                  if (s2 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 4) === peg$c60) {
                                                                      s2 = peg$c60;
                                                                      peg$currPos += 4;
                                                                    } else {
                                                                      s2 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$e89); }
                                                                    }
                                                                    if (s2 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 4) === peg$c61) {
                                                                        s2 = peg$c61;
                                                                        peg$currPos += 4;
                                                                      } else {
                                                                        s2 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$e90); }
                                                                      }
                                                                      if (s2 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 4) === peg$c62) {
                                                                          s2 = peg$c62;
                                                                          peg$currPos += 4;
                                                                        } else {
                                                                          s2 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$e91); }
                                                                        }
                                                                        if (s2 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 4) === peg$c63) {
                                                                            s2 = peg$c63;
                                                                            peg$currPos += 4;
                                                                          } else {
                                                                            s2 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$e92); }
                                                                          }
                                                                          if (s2 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 4) === peg$c64) {
                                                                              s2 = peg$c64;
                                                                              peg$currPos += 4;
                                                                            } else {
                                                                              s2 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$e93); }
                                                                            }
                                                                            if (s2 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 4) === peg$c65) {
                                                                                s2 = peg$c65;
                                                                                peg$currPos += 4;
                                                                              } else {
                                                                                s2 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$e94); }
                                                                              }
                                                                              if (s2 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 4) === peg$c66) {
                                                                                  s2 = peg$c66;
                                                                                  peg$currPos += 4;
                                                                                } else {
                                                                                  s2 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e95); }
                                                                                }
                                                                                if (s2 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 4) === peg$c67) {
                                                                                    s2 = peg$c67;
                                                                                    peg$currPos += 4;
                                                                                  } else {
                                                                                    s2 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e96); }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f21(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

    return s0;
  }

  function peg$parseCloudObscurationGroup() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseSKC();
    if (s1 === peg$FAILED) {
      s1 = peg$parseFEW();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSCT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseBKN();
          if (s1 === peg$FAILED) {
            s1 = peg$parseOvercast();
            if (s1 === peg$FAILED) {
              s1 = peg$parseVV();
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }

    return s0;
  }

  function peg$parseVV() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c68) {
        s3 = peg$c68;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e98); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseCloudBase();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f23(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSKC() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c69) {
        s2 = peg$c69;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e99); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f24(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFEW() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseFewCoverage();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseFEW();
      if (s4 === peg$FAILED) {
        s4 = peg$parseSCT();
        if (s4 === peg$FAILED) {
          s4 = peg$parseBroken();
          if (s4 === peg$FAILED) {
            s4 = peg$parseOvercast();
          }
        }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s2;
      s2 = peg$f25(s3, s4);
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseFewCoverage();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFEW();
          if (s4 === peg$FAILED) {
            s4 = peg$parseSCT();
            if (s4 === peg$FAILED) {
              s4 = peg$parseBroken();
              if (s4 === peg$FAILED) {
                s4 = peg$parseOvercast();
              }
            }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s2;
          s2 = peg$f25(s3, s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f26(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }

    return s0;
  }

  function peg$parseSCT() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseScattered();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseScattered();
      if (s3 === peg$FAILED) {
        s3 = peg$parseBKN();
        if (s3 === peg$FAILED) {
          s3 = peg$parseOvercast();
        }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseBKN();
      if (s4 === peg$FAILED) {
        s4 = peg$parseOvercast();
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s1;
      s1 = peg$f27(s2, s3, s4);
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }

    return s0;
  }

  function peg$parseBKN() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseBroken();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseBroken();
      if (s3 === peg$FAILED) {
        s3 = peg$parseOvercast();
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseBroken();
      if (s4 === peg$FAILED) {
        s4 = peg$parseOvercast();
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseOvercast();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s1;
      s1 = peg$f28(s2, s3, s4, s5);
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }

    return s0;
  }

  function peg$parseFewCoverage() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c70) {
        s2 = peg$c70;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e103); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCloudBase();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f29(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseScattered() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c71) {
        s2 = peg$c71;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e104); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCloudBase();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f29(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBroken() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c72) {
        s2 = peg$c72;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCloudBase();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f29(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOvercast() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c73) {
        s2 = peg$c73;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e107); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCloudBase();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f30(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }

    return s0;
  }

  function peg$parseCloudBase() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$r11.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s3 !== peg$FAILED) {
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c74) {
        s2 = peg$c74;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f31(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAltsg() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c75) {
        s2 = peg$c75;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e110); }
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c76) {
          s3 = peg$c76;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e111); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c77) {
            s3 = peg$c77;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e112); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (peg$r4.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e21); }
          }
          if (s5 !== peg$FAILED) {
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e21); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c78) {
              s5 = peg$c78;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e113); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f32(s3, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDateHourUTC() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDD();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseHH();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f33(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTemperatureGroup() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseMaxTemp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseMinTemp();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f34(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }

    return s0;
  }

  function peg$parseMaxTemp() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c79) {
        s2 = peg$c79;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTemperature();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDateHourUTC();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 90) {
                s6 = peg$c4;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e17); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f35(s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMinTemp() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c80) {
        s2 = peg$c80;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e116); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTemperature();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDateHourUTC();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 90) {
                s6 = peg$c4;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e17); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTemperature() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 77) {
      s2 = peg$c81;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s3 !== peg$FAILED) {
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s4 !== peg$FAILED) {
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f37(s1);
    }
    s0 = s1;

    return s0;
  }



      function flattenSkyCondition(L1,L2) {
          if(!!L2) return [L1,L2.flat()]
          return [L1]
      }//Precipitation)? Obscuration? Vicinity
      function validateThunderstormForecast(skyCondition){
              var isLowestBrokenOrOvercastLayer = true
              skyCondition.forEach(([ccc,base,CBRemark])=>{

                  // validate CB remark
                  const isBrokenOrOvercast = ccc ==="BKN" | ccc ==="OVC"
                  console.log(ccc)

                  if(isBrokenOrOvercast && isLowestBrokenOrOvercastLayer){
                      isLowestBrokenOrOvercastLayer = false
                      if (!CBRemark) throw {
                          type: "SyntaxError",
                          message: 'a CB remark is required on the lowest broken or overcast layer',
                          found: location()
                      }

                  } else if (isBrokenOrOvercast && !isLowestBrokenOrOvercastLayer){
                      if (CBRemark) throw {
                          type: "SyntaxError",
                          message: 'Only include the CB remark on the lowest borken or overcast layer',
                          found: location()
                      } 
                  }
              })
      }
      function validateCondtions([Precipitation,Obscuration,Vicinity],{wind,visibility,weather,skyCondition}){
          let weatherConditions = [Obscuration,Vicinity]



          if(!!Precipitation){
              weatherConditions.push(Precipitation)
              const precipType = Precipitation.replace(/(\+|-)/,"")
              switch(precipType){
                  case "TSRA":
                      validateThunderstormForecast(skyCondition)
                      break




                  default:
                      return
              }

              // var isLowestBrokenOrOvercastLayer = true
              // skyCondition.forEach(([ccc,base,CBRemark])=>{
              //     // validate CB remark
              //     const isBrokenOrOvercast = ccc ==="BKN" | ccc ==="OVC"

              //     if(isBrokenOrOvercast && isLowestBrokenOrOvercastLayer){
              //         isLowestBrokenOrOvercastLayer = false
              //         if (!CBRemark) throw {
              //             type: "SyntaxError",
              //             message: 'a CB remark is required on the lowest broken or overcast layer',
              //             found: location()
              //         }

              //     }else if (isBrokenOrOvercast && !isLowestBrokenOrOvercastLayer){
              //         if (CBRemark) throw {
              //             type: "SyntaxError",
              //             message: 'Only include the CB remark on the lowest borken or overcast layer',
              //             found: location()
              //         } 
              //     }
              // })

          }
          // conds.forEach(c=>{
          //     if(!!c)weatherConditions.push(c)
          // })
          

          return weatherConditions

      }
      

    

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
